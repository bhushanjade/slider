{"version":3,"sources":["hoc/PrivateRoute.js","serviceWorker.js","hoc/DefaultLayout.js","index.js"],"names":["PrivateRoute","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","isAuthenticated","_this2","_this$props","Component","component","Layout","layout","rest","objectWithoutProperties","react_default","a","createElement","react_router","assign","render","to","pathname","from","location","nextProps","prevState","localStorage","getItem","process","React","Boolean","window","hostname","match","DefaultLayout","_ref","matchProps","className","App","lazy","__webpack_require__","e","then","bind","Login","Promise","all","ReactDOM","react_router_dom","basename","react","fallback","hoc_PrivateRoute","exact","path","objectDestructuringEmpty","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de8dc389.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\n\r\n\r\nclass PrivateRoute extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            isAuthenticated: false,\r\n        };\r\n    }\r\n\r\n\r\n    /*\r\n     * USER NAME PASSWORD should be provided in ENV.\r\n     * componentWillReceiveProps is deprecated, so will be using this method.\r\n     * By default this method is called on mounting of component\r\n     * @see ref : https://reactjs.org/docs/react-component.html\r\n     * so when first time it calls we check token exist in localstorage return true/false\r\n     * */\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n\r\n        if (localStorage.getItem(process.env.REACT_APP_AUTH_LOCALSTORAGE_KEY) !== null) {\r\n            return {\r\n                loading: false,\r\n                isAuthenticated: true,\r\n            };\r\n        }\r\n        if (localStorage.getItem(process.env.REACT_APP_AUTH_LOCALSTORAGE_KEY) === null) {\r\n            return {\r\n                loading: false,\r\n                isAuthenticated: false,\r\n            };\r\n        }\r\n\r\n    }\r\n//TODO : review to keep or remove it\r\n    // componentDidMount() {\r\n    //\r\n    //     if (localStorage.getItem('token') !== null) {\r\n    //         console.log(\"rendering 12\");\r\n    //         this.setState({\r\n    //             loading: false,\r\n    //             isAuthenticated: true,\r\n    //         });\r\n    //     }\r\n    //\r\n    //     if (localStorage.getItem('token') === null) {\r\n    //         this.setState({\r\n    //             loading: false,\r\n    //             isAuthenticated: false,\r\n    //         });\r\n    //     }\r\n    //\r\n    // }\r\n\r\n\r\n    render() {\r\n\r\n        const {component: Component, layout: Layout, ...rest} = this.props;\r\n        const {isAuthenticated} = this.state;\r\n\r\n        return (\r\n            <Route\r\n                {...rest}\r\n                render={props =>\r\n                    isAuthenticated && !this.state.loading ? (\r\n\r\n                        <Layout component={Component} {...this.props} />\r\n                    ) : (\r\n                        this.state.loading ? (\r\n                            <div>Please Wait...</div>\r\n                        ) : (\r\n                            <Redirect to={{\r\n                                pathname: '/login',\r\n                                state: {from: this.props.location},\r\n                            }}/>\r\n                        )\r\n                    )\r\n                }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default (PrivateRoute);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nimport { Route } from 'react-router-dom';\r\n\r\n// import Sidebar from '../components/common/Sidebar';\r\n// import Header from '../components/common/Header';\r\n\r\n// import common from '../assets/css/common.css';\r\nconst DefaultLayout = ({component: Component, ...rest}) => {\r\n  return (\r\n      <Route {...rest} render={matchProps => (\r\n          <div className=\"DefaultLayout\">\r\n            {/*<Sidebar {...rest} />*/}\r\n            {/*<Header {...rest} />*/}\r\n            <div className=\"content-wrapper\">\r\n              <div className=\"container-fluid \">\r\n                <Component {...matchProps} />\r\n              </div>\r\n            </div>\r\n            <div className=\"Footer\"></div>\r\n          </div>\r\n      )} />\r\n  );\r\n};\r\n\r\nexport default DefaultLayout;","import React, {Component, Suspense} from 'react';\n\nimport PrivateRoute from './hoc/PrivateRoute';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport DefaultLayout from './hoc/DefaultLayout';\n\nconst App = React.lazy(() => import('./App'));\nconst Login = React.lazy(() => import('./components/Login'));\nconst Finish = React.lazy(() => import('./components/Popup'));\n\n\nconst NoMatch = ({}) => (\n    <div>\n        <h3>\n            No match for <code>{window.location.pathname}</code>\n        </h3>\n    </div>\n);\n//Ref : https://github.com/facebook/create-react-app/issues/1765\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>\n    <div>\n        <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n\n                <PrivateRoute exact path=\"/\" component={App}\n                              layout={DefaultLayout}/>\n\n                <Route path=\"/login\" component={Login}/>\n\n\n                <Route component={NoMatch}/>\n\n            </Switch>\n        </Suspense>\n    </div>\n\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}