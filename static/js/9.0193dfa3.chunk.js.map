{"version":3,"sources":["components/Popup.jsx"],"names":["Popup","props","_this","Object","N_slider_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","N_slider_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","N_slider_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","reset","resetCount","toggle","state","modal","bind","N_slider_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","setState","prevState","hidePopup","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_7__","isOpen","className","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","selectedNums","join","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","color","onClick","React","Component"],"mappings":"kPAGqBA,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAUVQ,MAAO,WACHP,EAAKD,MAAMS,aACXR,EAAKS,UAXLT,EAAKU,MAAQ,CACTC,OAAO,GAGXX,EAAKS,OAAST,EAAKS,OAAOG,KAAZX,OAAAY,EAAA,EAAAZ,CAAAD,IANCA,mFASfG,KAAKM,0CAOLN,KAAKW,SAAS,SAAAC,GAAS,MAAK,CACxBJ,OAAQI,EAAUJ,SAGnBR,KAAKO,MAAMC,OACVR,KAAKJ,MAAMiB,6CAMf,OACIC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,OAAQlB,KAAKO,MAAMC,MAAOF,OAAQN,KAAKM,OAAQa,UAAWnB,KAAKJ,MAAMuB,WACxEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAad,OAAQN,KAAKM,QAA1B,oBACAQ,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACKrB,KAAKJ,MAAM0B,aAAaC,KAAK,MAElCT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS3B,KAAKI,OAAtC,eAAkE,IAClEU,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAAS3B,KAAKM,QAAxC,oBAtCWsB,IAAMC","file":"static/js/9.0193dfa3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nexport default class Popup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false\r\n        };\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        this.toggle();\r\n    }\r\n    reset =() =>{\r\n        this.props.resetCount();\r\n        this.toggle();\r\n    }\r\n    toggle() {\r\n        this.setState(prevState => ({\r\n            modal: !prevState.modal\r\n        }));\r\n\r\n        if(this.state.modal){\r\n            this.props.hidePopup();\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*<Button color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>*/}\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                    <ModalHeader toggle={this.toggle}>Selected Numbers</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.props.selectedNums.join(\",\")}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={this.reset}>Reset Count</Button>{' '}\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}