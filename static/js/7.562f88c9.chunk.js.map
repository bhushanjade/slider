{"version":3,"sources":["components/carousel/Slide.jsx","components/carousel/Arrow.jsx","components/carousel/DotsMemo.jsx","components/carousel/Carousel.jsx"],"names":["Slide","react_default","a","createElement","className","this","props","text","React","Component","Arrow","_ref","direction","clickFunction","glyph","concat","onClick","DotsMemo","memo","isActive","onClickHandler","title","Carousel","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","previousSlide","bind","assertThisInitialized","nextSlide","selectSlide","state","currentImageIndex","slideNum","setState","lastIndex","parseInt","totalSlides","index","_this2","dots","_loop","i","push","carousel_DotsMemo","key","Fragment","Slide_Slide","carousel_Arrow","Header","propTypes","string","isRequired","slides","object"],"mappings":"yLAGqBA,mLAQb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,cAVIC,IAAMC,mBCW1BC,EAVD,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,cAAeC,EAA7BH,EAA6BG,MAA7B,OACZb,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAW,OAAiBH,GAAaI,QAASH,GAClDC,ICWUG,EAbET,IAAMU,KAAK,SAAAZ,GAAS,IACzBa,EAAmCb,EAAnCa,SAAUC,EAAyBd,EAAzBc,eAAeC,EAAUf,EAAVe,MAEjC,OACIpB,EAAAC,EAAAC,cAAA,QAAMkB,MAAOA,EAAOjB,UAAS,OAAAW,OAASI,EAAY,SAAU,MAAQH,QAASI,GAA7E,yECCaE,cACjB,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,KAAMC,KACDuB,cAAgBN,EAAKM,cAAcC,KAAnBN,OAAAO,EAAA,EAAAP,CAAAD,IACrBA,EAAKS,UAAYT,EAAKS,UAAUF,KAAfN,OAAAO,EAAA,EAAAP,CAAAD,IACjBA,EAAKU,YAAcV,EAAKU,YAAYH,KAAjBN,OAAAO,EAAA,EAAAP,CAAAD,IACnBA,EAAKW,MAAQ,CACTC,kBAAmB,GANRZ,2EAUPa,GAER/B,KAAKgC,SAAS,CACVF,kBAAmBC,4CAKvB,IAAME,EAAYC,SAASlC,KAAKC,MAAMkC,YAAa,IAC5CL,EAAqB9B,KAAK6B,MAA1BC,kBAEDM,EADyC,IAAtBN,EACQG,EAAYH,EAAoB,EAEjE9B,KAAKgC,SAAS,CACVF,kBAAmBM,wCAKvB,IAAMH,EAAYC,SAASlC,KAAKC,MAAMkC,YAAa,IAC5CL,EAAqB9B,KAAK6B,MAA1BC,kBAEDM,EADmBN,IAAsBG,EACd,EAAIH,EAAoB,EAEzD9B,KAAKgC,SAAS,CACVF,kBAAmBM,qCAqBvB,IAHK,IAAAC,EAAArC,KACD8B,EAAoB9B,KAAK6B,MAAMC,kBAC/BQ,EAAO,GAFNC,EAAA,SAGIC,GACLF,EAAKG,KAAK7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAU1B,MAAOwB,EAAGG,IAAKH,EAAG1B,SAAUgB,IAAsBU,EAClDzB,eAAgB,kBAAMsB,EAAKT,YAAYY,QAFtDA,EAAI,EAAGA,GAAKN,SAASlC,KAAKC,MAAMkC,aAAcK,IAAKD,EAAnDC,GAIT,OACI5C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACIhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAEXH,EAAAC,EAAAC,cAAC+C,EAAD,CAAO3C,KAAMF,KAAKC,MAAL,OAAqB6B,KAGlClC,EAAAC,EAAAC,cAACgD,EAAD,CAAOvC,UAAU,OAAOC,cAAeR,KAAK2B,UAAWlB,MAAM,WAC7Db,EAAAC,EAAAC,cAACgD,EAAD,CAAOvC,UAAU,OAAOC,cAAeR,KAAKwB,cAAef,MAAM,YAGrEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVuC,WAzEiBnC,IAAMC,WAmF5C2C,IAAOC,UAAY,CACfb,YAAaa,IAAUC,OAAOC,WAC9BC,OAAOH,IAAUI,OAAOF","file":"static/js/7.562f88c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nexport default class Slide extends React.Component {\r\n    render() {\r\n        // const styles = {\r\n        //   backgroundImage: `url(${this.props.url})`,\r\n        //   backgroundSize: \"cover\",\r\n        //   backgroundPosition: \"center\"\r\n        //   // transition: \"transition1l\"\r\n        // };\r\n        return (\r\n            <div className=\"slide transition1l\">\r\n                <p>{this.props.text}</p>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nSlide.propTypes = {\r\n    text: propTypes.string.isRequired,\r\n};\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Header} from \"../Header\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst Arrow = ({ direction, clickFunction, glyph }) => (\r\n  <div className={`slide-arrow ${direction}`} onClick={clickFunction}>\r\n    {glyph}\r\n  </div>\r\n);\r\nArrow.propTypes = {\r\n    direction: propTypes.string.isRequired,\r\n    glyph: propTypes.string.isRequired,\r\n    clickFunction:propTypes.func.isRequired,\r\n};\r\nexport default Arrow;\r\n","import React from \"react\";\r\nimport Slide from \"./Slide\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst DotsMemo = React.memo(props => {\r\n    const { isActive, onClickHandler,title } = props;\r\n\r\n    return (\r\n        <span title={title} className={`dot ${isActive ?  'active': null}`} onClick={onClickHandler}> </span>\r\n    )\r\n});\r\nDotsMemo.propTypes = {\r\n    isActive: propTypes.bool.isRequired,\r\n    title: propTypes.string,\r\n    onClickHandler: propTypes.func.isRequired,\r\n\r\n};\r\nexport default DotsMemo;","import React from \"react\";\r\nimport Slide from \"./Slide\";\r\nimport Arrow from \"./Arrow\";\r\nimport DotsMemo from './DotsMemo';\r\nimport '../../slider.css';\r\nimport {Header} from \"../Header\";\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nexport default class Carousel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.previousSlide = this.previousSlide.bind(this);\r\n        this.nextSlide = this.nextSlide.bind(this);\r\n        this.selectSlide = this.selectSlide.bind(this);\r\n        this.state = {\r\n            currentImageIndex: 1\r\n        };\r\n    }\r\n\r\n    selectSlide(slideNum) {\r\n\r\n        this.setState({\r\n            currentImageIndex: slideNum\r\n        });\r\n    }\r\n\r\n    previousSlide() {\r\n        const lastIndex = parseInt(this.props.totalSlides, 10);\r\n        const {currentImageIndex} = this.state;\r\n        const shouldResetIndex = currentImageIndex === 1;\r\n        const index = shouldResetIndex ? lastIndex : currentImageIndex - 1;\r\n\r\n        this.setState({\r\n            currentImageIndex: index\r\n        });\r\n    }\r\n\r\n    nextSlide() {\r\n        const lastIndex = parseInt(this.props.totalSlides, 10);\r\n        const {currentImageIndex} = this.state;\r\n        const shouldResetIndex = currentImageIndex === lastIndex;\r\n        const index = shouldResetIndex ? 1 : currentImageIndex + 1;\r\n\r\n        this.setState({\r\n            currentImageIndex: index\r\n        });\r\n    }\r\n\r\n    /**\r\n     componentDidMount() {\r\n    //this.startCarousel();\r\n  }\r\n     startCarousel = () => {\r\n    this.carouselInterval = setInterval(() => {\r\n      this.transitionSlides();\r\n    }, 1500);\r\n};\r\n\r\n     transitionSlides() {\r\n  console.log(\"tranistion\");\r\n}\r\n     */\r\n    render() {\r\n        let currentImageIndex = this.state.currentImageIndex;\r\n        let dots = [];\r\n        for (let i = 1; i <= parseInt(this.props.totalSlides); i++) {\r\n            dots.push(<DotsMemo title={i} key={i} isActive={currentImageIndex === i ? true : false}\r\n                                onClickHandler={() => this.selectSlide(i)}/>)\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"slideshow-container\">\r\n\r\n                    <Slide text={this.props[\"slides\"][currentImageIndex]}/>\r\n\r\n\r\n                    <Arrow direction=\"next\" clickFunction={this.nextSlide} glyph=\"&#9654;\"/>\r\n                    <Arrow direction=\"prev\" clickFunction={this.previousSlide} glyph=\"&#9664;\"/>\r\n                </div>\r\n\r\n                <div className=\"dot-container\">\r\n                    {dots}\r\n                </div>\r\n            </>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nHeader.propTypes = {\r\n    totalSlides: propTypes.string.isRequired,\r\n    slides:propTypes.object.isRequired,\r\n};\r\n\r\n\r\n"],"sourceRoot":""}